package main

import (
	"flag"
	"go/format"
	"io/ioutil"
	"time"

	"github.com/Sirupsen/logrus"
	"github.com/docker/docker/pkg/generate"

	"github.com/docker/docker/container"
)

type copyType struct {
	// name to use in func, e.g. `o` would be `func(o SomeThing) Copy() SomeThing{}`
	ref string
	// the type to generate a copy function for
	t interface{}
	// list of reflect types for things known to an import error due to non-exported names.
	// Eexample `time.Time` has a `loc` field which is a pointer to a struct.
	// A copy function cannot be generated for `time.Time{}.loc` since we don't have
	// access to that field.
	ignoreErrs []interface{}
}

var comment = []byte(`// Code generated by cmd/pkg/generate/deepcopy
// DO NOT EDIT!
`)

var copyTypes = map[string]copyType{
	"container": copyType{ref: "container", t: &container.Container{}, ignoreErrs: []interface{}{time.Time{}}},
}

func main() {
	flCopyType := flag.String("type", "", "list of types to generate copy functions for")
	flOutFile := flag.String("out", "", "file location to write copy function to")
	flPkgName := flag.String("pkg", "", "package name to use")
	flag.Parse()

	copyType := *flCopyType
	if copyType == "" {
		logrus.Fatal("must supply `-type` flag")
	}

	out := *flOutFile
	if out == "" {
		logrus.Fatal("must supply `-out` flag")
	}

	pkg := *flPkgName
	if pkg == "" {
		logrus.Fatal("must supply `-pkg` flag")
	}

	t, exists := copyTypes[copyType]
	if !exists {
		logrus.Fatalf("unknown copy type: %s", copyType)
	}

	imports, copyCode, err := generate.DeepCopyFunc(t.ref, t.t, t.ignoreErrs)
	if err != nil {
		logrus.Fatalf("Error generating copy function for type '%s': %v", copyType, err)
	}
	b := append(comment, []byte("\n\npackage "+pkg+"\n\n")...)
	b = append(b, imports...)
	b = append(b, copyCode...)

	code, err := format.Source(b)
	if err != nil {
		logrus.Fatalf("error while formating code: %v\n%s", err, string(b))
	}

	if err := ioutil.WriteFile(out, code, 0664); err != nil {
		logrus.Fatalf("Error writing generated code to file: %v", err)
	}
}
