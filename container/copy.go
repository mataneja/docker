// Code generated by cmd/pkg/generate/deepcopy
// DO NOT EDIT!

package container

import (
	github_com_docker_docker_api_types "github.com/docker/docker/api/types"
	github_com_docker_docker_api_types_blkiodev "github.com/docker/docker/api/types/blkiodev"
	github_com_docker_docker_api_types_container "github.com/docker/docker/api/types/container"
	github_com_docker_docker_api_types_mount "github.com/docker/docker/api/types/mount"
	github_com_docker_docker_api_types_network "github.com/docker/docker/api/types/network"
	github_com_docker_docker_api_types_strslice "github.com/docker/docker/api/types/strslice"
	github_com_docker_docker_daemon_cluster_provider "github.com/docker/docker/daemon/cluster/provider"
	github_com_docker_docker_daemon_network "github.com/docker/docker/daemon/network"
	github_com_docker_docker_volume "github.com/docker/docker/volume"
	github_com_docker_go_connections_nat "github.com/docker/go-connections/nat"
	github_com_docker_go_units "github.com/docker/go-units"
)

func (container *Container) Copy() *Container {
	var containerCopy Container
	containerCopy = *container
	containerCopy.CommonContainer = container.CommonContainer
	if container.CommonContainer.State != nil {
		var containerCopy0_CommonContainer_State State
		containerCopy0_CommonContainer_State = *container.CommonContainer.State
		containerCopy.CommonContainer.State = &containerCopy0_CommonContainer_State
		containerCopy.CommonContainer.State.StartedAt = container.CommonContainer.State.StartedAt
		containerCopy.CommonContainer.State.FinishedAt = container.CommonContainer.State.FinishedAt
		if container.CommonContainer.State.Health != nil {
			var containerCopy0_CommonContainer_State0_Health Health
			containerCopy0_CommonContainer_State0_Health = *container.CommonContainer.State.Health
			containerCopy.CommonContainer.State.Health = &containerCopy0_CommonContainer_State0_Health
			if container.CommonContainer.State.Health.Log != nil {
				containerCopy.CommonContainer.State.Health.Log = make([]*github_com_docker_docker_api_types.HealthcheckResult, len(container.CommonContainer.State.Health.Log))
				for i0, v0 := range container.CommonContainer.State.Health.Log {
					if v0 != nil {
						var containerCopy0_CommonContainer_State0_Health0_Log0 github_com_docker_docker_api_types.HealthcheckResult
						containerCopy0_CommonContainer_State0_Health0_Log0 = *v0
						containerCopy.CommonContainer.State.Health.Log[i0] = &containerCopy0_CommonContainer_State0_Health0_Log0
						containerCopy.CommonContainer.State.Health.Log[i0].Start = v0.Start
						containerCopy.CommonContainer.State.Health.Log[i0].End = v0.End
					}

				}

			}

		}

	}

	containerCopy.CommonContainer.Created = container.CommonContainer.Created
	if container.CommonContainer.Args != nil {
		containerCopy.CommonContainer.Args = make([]string, len(container.CommonContainer.Args))
		for i0, v0 := range container.CommonContainer.Args {
			containerCopy.CommonContainer.Args[i0] = v0
		}

	}

	if container.CommonContainer.Config != nil {
		var containerCopy0_CommonContainer_Config github_com_docker_docker_api_types_container.Config
		containerCopy0_CommonContainer_Config = *container.CommonContainer.Config
		containerCopy.CommonContainer.Config = &containerCopy0_CommonContainer_Config
		if container.CommonContainer.Config.ExposedPorts != nil {
			containerCopy.CommonContainer.Config.ExposedPorts = make(map[github_com_docker_go_connections_nat.Port]struct{}, len(container.CommonContainer.Config.ExposedPorts))
			for i0, v0 := range container.CommonContainer.Config.ExposedPorts {
				containerCopy.CommonContainer.Config.ExposedPorts[i0] = v0
			}

		}

		if container.CommonContainer.Config.Env != nil {
			containerCopy.CommonContainer.Config.Env = make([]string, len(container.CommonContainer.Config.Env))
			for i0, v0 := range container.CommonContainer.Config.Env {
				containerCopy.CommonContainer.Config.Env[i0] = v0
			}

		}

		if container.CommonContainer.Config.Cmd != nil {
			containerCopy.CommonContainer.Config.Cmd = make(github_com_docker_docker_api_types_strslice.StrSlice, len(container.CommonContainer.Config.Cmd))
			for i0, v0 := range container.CommonContainer.Config.Cmd {
				containerCopy.CommonContainer.Config.Cmd[i0] = v0
			}

		}

		if container.CommonContainer.Config.Healthcheck != nil {
			var containerCopy0_CommonContainer_Config0_Healthcheck github_com_docker_docker_api_types_container.HealthConfig
			containerCopy0_CommonContainer_Config0_Healthcheck = *container.CommonContainer.Config.Healthcheck
			containerCopy.CommonContainer.Config.Healthcheck = &containerCopy0_CommonContainer_Config0_Healthcheck
			if container.CommonContainer.Config.Healthcheck.Test != nil {
				containerCopy.CommonContainer.Config.Healthcheck.Test = make([]string, len(container.CommonContainer.Config.Healthcheck.Test))
				for i0, v0 := range container.CommonContainer.Config.Healthcheck.Test {
					containerCopy.CommonContainer.Config.Healthcheck.Test[i0] = v0
				}

			}

		}

		if container.CommonContainer.Config.Volumes != nil {
			containerCopy.CommonContainer.Config.Volumes = make(map[string]struct{}, len(container.CommonContainer.Config.Volumes))
			for i0, v0 := range container.CommonContainer.Config.Volumes {
				containerCopy.CommonContainer.Config.Volumes[i0] = v0
			}

		}

		if container.CommonContainer.Config.Entrypoint != nil {
			containerCopy.CommonContainer.Config.Entrypoint = make(github_com_docker_docker_api_types_strslice.StrSlice, len(container.CommonContainer.Config.Entrypoint))
			for i0, v0 := range container.CommonContainer.Config.Entrypoint {
				containerCopy.CommonContainer.Config.Entrypoint[i0] = v0
			}

		}

		if container.CommonContainer.Config.OnBuild != nil {
			containerCopy.CommonContainer.Config.OnBuild = make([]string, len(container.CommonContainer.Config.OnBuild))
			for i0, v0 := range container.CommonContainer.Config.OnBuild {
				containerCopy.CommonContainer.Config.OnBuild[i0] = v0
			}

		}

		if container.CommonContainer.Config.Labels != nil {
			containerCopy.CommonContainer.Config.Labels = make(map[string]string, len(container.CommonContainer.Config.Labels))
			for i0, v0 := range container.CommonContainer.Config.Labels {
				containerCopy.CommonContainer.Config.Labels[i0] = v0
			}

		}

		if container.CommonContainer.Config.StopTimeout != nil {
			var containerCopy0_CommonContainer_Config0_StopTimeout int
			containerCopy0_CommonContainer_Config0_StopTimeout = *container.CommonContainer.Config.StopTimeout
			containerCopy.CommonContainer.Config.StopTimeout = &containerCopy0_CommonContainer_Config0_StopTimeout
		}

		if container.CommonContainer.Config.Shell != nil {
			containerCopy.CommonContainer.Config.Shell = make(github_com_docker_docker_api_types_strslice.StrSlice, len(container.CommonContainer.Config.Shell))
			for i0, v0 := range container.CommonContainer.Config.Shell {
				containerCopy.CommonContainer.Config.Shell[i0] = v0
			}

		}

	}

	if container.CommonContainer.NetworkSettings != nil {
		var containerCopy0_CommonContainer_NetworkSettings github_com_docker_docker_daemon_network.Settings
		containerCopy0_CommonContainer_NetworkSettings = *container.CommonContainer.NetworkSettings
		containerCopy.CommonContainer.NetworkSettings = &containerCopy0_CommonContainer_NetworkSettings
		if container.CommonContainer.NetworkSettings.Networks != nil {
			containerCopy.CommonContainer.NetworkSettings.Networks = make(map[string]*github_com_docker_docker_daemon_network.EndpointSettings, len(container.CommonContainer.NetworkSettings.Networks))
			for i0, v0 := range container.CommonContainer.NetworkSettings.Networks {
				if v0 != nil {
					var containerCopy0_CommonContainer_NetworkSettings0_Networks0 github_com_docker_docker_daemon_network.EndpointSettings
					containerCopy0_CommonContainer_NetworkSettings0_Networks0 = *v0
					containerCopy.CommonContainer.NetworkSettings.Networks[i0] = &containerCopy0_CommonContainer_NetworkSettings0_Networks0
					if v0.EndpointSettings != nil {
						var containerCopy0_CommonContainer_NetworkSettings0_Networks01_EndpointSettings github_com_docker_docker_api_types_network.EndpointSettings
						containerCopy0_CommonContainer_NetworkSettings0_Networks01_EndpointSettings = *v0.EndpointSettings
						containerCopy.CommonContainer.NetworkSettings.Networks[i0].EndpointSettings = &containerCopy0_CommonContainer_NetworkSettings0_Networks01_EndpointSettings
						if v0.EndpointSettings.IPAMConfig != nil {
							var containerCopy0_CommonContainer_NetworkSettings0_Networks01_EndpointSettings1_IPAMConfig github_com_docker_docker_api_types_network.EndpointIPAMConfig
							containerCopy0_CommonContainer_NetworkSettings0_Networks01_EndpointSettings1_IPAMConfig = *v0.EndpointSettings.IPAMConfig
							containerCopy.CommonContainer.NetworkSettings.Networks[i0].EndpointSettings.IPAMConfig = &containerCopy0_CommonContainer_NetworkSettings0_Networks01_EndpointSettings1_IPAMConfig
							if v0.EndpointSettings.IPAMConfig.LinkLocalIPs != nil {
								containerCopy.CommonContainer.NetworkSettings.Networks[i0].EndpointSettings.IPAMConfig.LinkLocalIPs = make([]string, len(v0.EndpointSettings.IPAMConfig.LinkLocalIPs))
								for i1, v1 := range v0.EndpointSettings.IPAMConfig.LinkLocalIPs {
									containerCopy.CommonContainer.NetworkSettings.Networks[i0].EndpointSettings.IPAMConfig.LinkLocalIPs[i1] = v1
								}

							}

						}

						if v0.EndpointSettings.Links != nil {
							containerCopy.CommonContainer.NetworkSettings.Networks[i0].EndpointSettings.Links = make([]string, len(v0.EndpointSettings.Links))
							for i1, v1 := range v0.EndpointSettings.Links {
								containerCopy.CommonContainer.NetworkSettings.Networks[i0].EndpointSettings.Links[i1] = v1
							}

						}

						if v0.EndpointSettings.Aliases != nil {
							containerCopy.CommonContainer.NetworkSettings.Networks[i0].EndpointSettings.Aliases = make([]string, len(v0.EndpointSettings.Aliases))
							for i1, v1 := range v0.EndpointSettings.Aliases {
								containerCopy.CommonContainer.NetworkSettings.Networks[i0].EndpointSettings.Aliases[i1] = v1
							}

						}

					}

				}

			}

		}

		if container.CommonContainer.NetworkSettings.Service != nil {
			var containerCopy0_CommonContainer_NetworkSettings0_Service github_com_docker_docker_daemon_cluster_provider.ServiceConfig
			containerCopy0_CommonContainer_NetworkSettings0_Service = *container.CommonContainer.NetworkSettings.Service
			containerCopy.CommonContainer.NetworkSettings.Service = &containerCopy0_CommonContainer_NetworkSettings0_Service
			if container.CommonContainer.NetworkSettings.Service.Aliases != nil {
				containerCopy.CommonContainer.NetworkSettings.Service.Aliases = make(map[string][]string, len(container.CommonContainer.NetworkSettings.Service.Aliases))
				for i0, v0 := range container.CommonContainer.NetworkSettings.Service.Aliases {
					if v0 != nil {
						containerCopy.CommonContainer.NetworkSettings.Service.Aliases[i0] = make([]string, len(v0))
						for i1, v1 := range v0 {
							containerCopy.CommonContainer.NetworkSettings.Service.Aliases[i0][i1] = v1
						}

					}

				}

			}

			if container.CommonContainer.NetworkSettings.Service.VirtualAddresses != nil {
				containerCopy.CommonContainer.NetworkSettings.Service.VirtualAddresses = make(map[string]*github_com_docker_docker_daemon_cluster_provider.VirtualAddress, len(container.CommonContainer.NetworkSettings.Service.VirtualAddresses))
				for i0, v0 := range container.CommonContainer.NetworkSettings.Service.VirtualAddresses {
					if v0 != nil {
						var containerCopy0_CommonContainer_NetworkSettings0_Service0_VirtualAddresses0 github_com_docker_docker_daemon_cluster_provider.VirtualAddress
						containerCopy0_CommonContainer_NetworkSettings0_Service0_VirtualAddresses0 = *v0
						containerCopy.CommonContainer.NetworkSettings.Service.VirtualAddresses[i0] = &containerCopy0_CommonContainer_NetworkSettings0_Service0_VirtualAddresses0
					}

				}

			}

			if container.CommonContainer.NetworkSettings.Service.ExposedPorts != nil {
				containerCopy.CommonContainer.NetworkSettings.Service.ExposedPorts = make([]*github_com_docker_docker_daemon_cluster_provider.PortConfig, len(container.CommonContainer.NetworkSettings.Service.ExposedPorts))
				for i0, v0 := range container.CommonContainer.NetworkSettings.Service.ExposedPorts {
					if v0 != nil {
						var containerCopy0_CommonContainer_NetworkSettings0_Service0_ExposedPorts0 github_com_docker_docker_daemon_cluster_provider.PortConfig
						containerCopy0_CommonContainer_NetworkSettings0_Service0_ExposedPorts0 = *v0
						containerCopy.CommonContainer.NetworkSettings.Service.ExposedPorts[i0] = &containerCopy0_CommonContainer_NetworkSettings0_Service0_ExposedPorts0
					}

				}

			}

		}

		if container.CommonContainer.NetworkSettings.Ports != nil {
			containerCopy.CommonContainer.NetworkSettings.Ports = make(github_com_docker_go_connections_nat.PortMap, len(container.CommonContainer.NetworkSettings.Ports))
			for i0, v0 := range container.CommonContainer.NetworkSettings.Ports {
				if v0 != nil {
					containerCopy.CommonContainer.NetworkSettings.Ports[i0] = make([]github_com_docker_go_connections_nat.PortBinding, len(v0))
					for i1, v1 := range v0 {
						containerCopy.CommonContainer.NetworkSettings.Ports[i0][i1] = v1
					}

				}

			}

		}

		if container.CommonContainer.NetworkSettings.SecondaryIPAddresses != nil {
			containerCopy.CommonContainer.NetworkSettings.SecondaryIPAddresses = make([]github_com_docker_docker_api_types_network.Address, len(container.CommonContainer.NetworkSettings.SecondaryIPAddresses))
			for i0, v0 := range container.CommonContainer.NetworkSettings.SecondaryIPAddresses {
				containerCopy.CommonContainer.NetworkSettings.SecondaryIPAddresses[i0] = v0
			}

		}

		if container.CommonContainer.NetworkSettings.SecondaryIPv6Addresses != nil {
			containerCopy.CommonContainer.NetworkSettings.SecondaryIPv6Addresses = make([]github_com_docker_docker_api_types_network.Address, len(container.CommonContainer.NetworkSettings.SecondaryIPv6Addresses))
			for i0, v0 := range container.CommonContainer.NetworkSettings.SecondaryIPv6Addresses {
				containerCopy.CommonContainer.NetworkSettings.SecondaryIPv6Addresses[i0] = v0
			}

		}

	}

	if container.CommonContainer.MountPoints != nil {
		containerCopy.CommonContainer.MountPoints = make(map[string]*github_com_docker_docker_volume.MountPoint, len(container.CommonContainer.MountPoints))
		for i0, v0 := range container.CommonContainer.MountPoints {
			if v0 != nil {
				var containerCopy0_CommonContainer_MountPoints0 github_com_docker_docker_volume.MountPoint
				containerCopy0_CommonContainer_MountPoints0 = *v0
				containerCopy.CommonContainer.MountPoints[i0] = &containerCopy0_CommonContainer_MountPoints0
				containerCopy.CommonContainer.MountPoints[i0].Spec = v0.Spec
				if v0.Spec.BindOptions != nil {
					var containerCopy0_CommonContainer_MountPoints01_Spec_BindOptions github_com_docker_docker_api_types_mount.BindOptions
					containerCopy0_CommonContainer_MountPoints01_Spec_BindOptions = *v0.Spec.BindOptions
					containerCopy.CommonContainer.MountPoints[i0].Spec.BindOptions = &containerCopy0_CommonContainer_MountPoints01_Spec_BindOptions
				}

				if v0.Spec.VolumeOptions != nil {
					var containerCopy0_CommonContainer_MountPoints01_Spec_VolumeOptions github_com_docker_docker_api_types_mount.VolumeOptions
					containerCopy0_CommonContainer_MountPoints01_Spec_VolumeOptions = *v0.Spec.VolumeOptions
					containerCopy.CommonContainer.MountPoints[i0].Spec.VolumeOptions = &containerCopy0_CommonContainer_MountPoints01_Spec_VolumeOptions
					if v0.Spec.VolumeOptions.Labels != nil {
						containerCopy.CommonContainer.MountPoints[i0].Spec.VolumeOptions.Labels = make(map[string]string, len(v0.Spec.VolumeOptions.Labels))
						for i1, v1 := range v0.Spec.VolumeOptions.Labels {
							containerCopy.CommonContainer.MountPoints[i0].Spec.VolumeOptions.Labels[i1] = v1
						}

					}

					if v0.Spec.VolumeOptions.DriverConfig != nil {
						var containerCopy0_CommonContainer_MountPoints01_Spec_VolumeOptions1_DriverConfig github_com_docker_docker_api_types_mount.Driver
						containerCopy0_CommonContainer_MountPoints01_Spec_VolumeOptions1_DriverConfig = *v0.Spec.VolumeOptions.DriverConfig
						containerCopy.CommonContainer.MountPoints[i0].Spec.VolumeOptions.DriverConfig = &containerCopy0_CommonContainer_MountPoints01_Spec_VolumeOptions1_DriverConfig
						if v0.Spec.VolumeOptions.DriverConfig.Options != nil {
							containerCopy.CommonContainer.MountPoints[i0].Spec.VolumeOptions.DriverConfig.Options = make(map[string]string, len(v0.Spec.VolumeOptions.DriverConfig.Options))
							for i1, v1 := range v0.Spec.VolumeOptions.DriverConfig.Options {
								containerCopy.CommonContainer.MountPoints[i0].Spec.VolumeOptions.DriverConfig.Options[i1] = v1
							}

						}

					}

				}

			}

		}

	}

	if container.CommonContainer.HostConfig != nil {
		var containerCopy0_CommonContainer_HostConfig github_com_docker_docker_api_types_container.HostConfig
		containerCopy0_CommonContainer_HostConfig = *container.CommonContainer.HostConfig
		containerCopy.CommonContainer.HostConfig = &containerCopy0_CommonContainer_HostConfig
		if container.CommonContainer.HostConfig.Binds != nil {
			containerCopy.CommonContainer.HostConfig.Binds = make([]string, len(container.CommonContainer.HostConfig.Binds))
			for i0, v0 := range container.CommonContainer.HostConfig.Binds {
				containerCopy.CommonContainer.HostConfig.Binds[i0] = v0
			}

		}

		containerCopy.CommonContainer.HostConfig.LogConfig = container.CommonContainer.HostConfig.LogConfig
		if container.CommonContainer.HostConfig.LogConfig.Config != nil {
			containerCopy.CommonContainer.HostConfig.LogConfig.Config = make(map[string]string, len(container.CommonContainer.HostConfig.LogConfig.Config))
			for i0, v0 := range container.CommonContainer.HostConfig.LogConfig.Config {
				containerCopy.CommonContainer.HostConfig.LogConfig.Config[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.PortBindings != nil {
			containerCopy.CommonContainer.HostConfig.PortBindings = make(github_com_docker_go_connections_nat.PortMap, len(container.CommonContainer.HostConfig.PortBindings))
			for i0, v0 := range container.CommonContainer.HostConfig.PortBindings {
				if v0 != nil {
					containerCopy.CommonContainer.HostConfig.PortBindings[i0] = make([]github_com_docker_go_connections_nat.PortBinding, len(v0))
					for i1, v1 := range v0 {
						containerCopy.CommonContainer.HostConfig.PortBindings[i0][i1] = v1
					}

				}

			}

		}

		containerCopy.CommonContainer.HostConfig.RestartPolicy = container.CommonContainer.HostConfig.RestartPolicy
		if container.CommonContainer.HostConfig.VolumesFrom != nil {
			containerCopy.CommonContainer.HostConfig.VolumesFrom = make([]string, len(container.CommonContainer.HostConfig.VolumesFrom))
			for i0, v0 := range container.CommonContainer.HostConfig.VolumesFrom {
				containerCopy.CommonContainer.HostConfig.VolumesFrom[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.CapAdd != nil {
			containerCopy.CommonContainer.HostConfig.CapAdd = make(github_com_docker_docker_api_types_strslice.StrSlice, len(container.CommonContainer.HostConfig.CapAdd))
			for i0, v0 := range container.CommonContainer.HostConfig.CapAdd {
				containerCopy.CommonContainer.HostConfig.CapAdd[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.CapDrop != nil {
			containerCopy.CommonContainer.HostConfig.CapDrop = make(github_com_docker_docker_api_types_strslice.StrSlice, len(container.CommonContainer.HostConfig.CapDrop))
			for i0, v0 := range container.CommonContainer.HostConfig.CapDrop {
				containerCopy.CommonContainer.HostConfig.CapDrop[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.DNS != nil {
			containerCopy.CommonContainer.HostConfig.DNS = make([]string, len(container.CommonContainer.HostConfig.DNS))
			for i0, v0 := range container.CommonContainer.HostConfig.DNS {
				containerCopy.CommonContainer.HostConfig.DNS[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.DNSOptions != nil {
			containerCopy.CommonContainer.HostConfig.DNSOptions = make([]string, len(container.CommonContainer.HostConfig.DNSOptions))
			for i0, v0 := range container.CommonContainer.HostConfig.DNSOptions {
				containerCopy.CommonContainer.HostConfig.DNSOptions[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.DNSSearch != nil {
			containerCopy.CommonContainer.HostConfig.DNSSearch = make([]string, len(container.CommonContainer.HostConfig.DNSSearch))
			for i0, v0 := range container.CommonContainer.HostConfig.DNSSearch {
				containerCopy.CommonContainer.HostConfig.DNSSearch[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.ExtraHosts != nil {
			containerCopy.CommonContainer.HostConfig.ExtraHosts = make([]string, len(container.CommonContainer.HostConfig.ExtraHosts))
			for i0, v0 := range container.CommonContainer.HostConfig.ExtraHosts {
				containerCopy.CommonContainer.HostConfig.ExtraHosts[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.GroupAdd != nil {
			containerCopy.CommonContainer.HostConfig.GroupAdd = make([]string, len(container.CommonContainer.HostConfig.GroupAdd))
			for i0, v0 := range container.CommonContainer.HostConfig.GroupAdd {
				containerCopy.CommonContainer.HostConfig.GroupAdd[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.Links != nil {
			containerCopy.CommonContainer.HostConfig.Links = make([]string, len(container.CommonContainer.HostConfig.Links))
			for i0, v0 := range container.CommonContainer.HostConfig.Links {
				containerCopy.CommonContainer.HostConfig.Links[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.SecurityOpt != nil {
			containerCopy.CommonContainer.HostConfig.SecurityOpt = make([]string, len(container.CommonContainer.HostConfig.SecurityOpt))
			for i0, v0 := range container.CommonContainer.HostConfig.SecurityOpt {
				containerCopy.CommonContainer.HostConfig.SecurityOpt[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.StorageOpt != nil {
			containerCopy.CommonContainer.HostConfig.StorageOpt = make(map[string]string, len(container.CommonContainer.HostConfig.StorageOpt))
			for i0, v0 := range container.CommonContainer.HostConfig.StorageOpt {
				containerCopy.CommonContainer.HostConfig.StorageOpt[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.Tmpfs != nil {
			containerCopy.CommonContainer.HostConfig.Tmpfs = make(map[string]string, len(container.CommonContainer.HostConfig.Tmpfs))
			for i0, v0 := range container.CommonContainer.HostConfig.Tmpfs {
				containerCopy.CommonContainer.HostConfig.Tmpfs[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.Sysctls != nil {
			containerCopy.CommonContainer.HostConfig.Sysctls = make(map[string]string, len(container.CommonContainer.HostConfig.Sysctls))
			for i0, v0 := range container.CommonContainer.HostConfig.Sysctls {
				containerCopy.CommonContainer.HostConfig.Sysctls[i0] = v0
			}

		}

		for i0, v0 := range container.CommonContainer.HostConfig.ConsoleSize {
			containerCopy.CommonContainer.HostConfig.ConsoleSize[i0] = v0
		}
		containerCopy.CommonContainer.HostConfig.Resources = container.CommonContainer.HostConfig.Resources
		if container.CommonContainer.HostConfig.Resources.BlkioWeightDevice != nil {
			containerCopy.CommonContainer.HostConfig.Resources.BlkioWeightDevice = make([]*github_com_docker_docker_api_types_blkiodev.WeightDevice, len(container.CommonContainer.HostConfig.Resources.BlkioWeightDevice))
			for i0, v0 := range container.CommonContainer.HostConfig.Resources.BlkioWeightDevice {
				if v0 != nil {
					var containerCopy0_CommonContainer_HostConfig0_Resources_BlkioWeightDevice0 github_com_docker_docker_api_types_blkiodev.WeightDevice
					containerCopy0_CommonContainer_HostConfig0_Resources_BlkioWeightDevice0 = *v0
					containerCopy.CommonContainer.HostConfig.Resources.BlkioWeightDevice[i0] = &containerCopy0_CommonContainer_HostConfig0_Resources_BlkioWeightDevice0
				}

			}

		}

		if container.CommonContainer.HostConfig.Resources.BlkioDeviceReadBps != nil {
			containerCopy.CommonContainer.HostConfig.Resources.BlkioDeviceReadBps = make([]*github_com_docker_docker_api_types_blkiodev.ThrottleDevice, len(container.CommonContainer.HostConfig.Resources.BlkioDeviceReadBps))
			for i0, v0 := range container.CommonContainer.HostConfig.Resources.BlkioDeviceReadBps {
				if v0 != nil {
					var containerCopy0_CommonContainer_HostConfig0_Resources_BlkioDeviceReadBps0 github_com_docker_docker_api_types_blkiodev.ThrottleDevice
					containerCopy0_CommonContainer_HostConfig0_Resources_BlkioDeviceReadBps0 = *v0
					containerCopy.CommonContainer.HostConfig.Resources.BlkioDeviceReadBps[i0] = &containerCopy0_CommonContainer_HostConfig0_Resources_BlkioDeviceReadBps0
				}

			}

		}

		if container.CommonContainer.HostConfig.Resources.BlkioDeviceWriteBps != nil {
			containerCopy.CommonContainer.HostConfig.Resources.BlkioDeviceWriteBps = make([]*github_com_docker_docker_api_types_blkiodev.ThrottleDevice, len(container.CommonContainer.HostConfig.Resources.BlkioDeviceWriteBps))
			for i0, v0 := range container.CommonContainer.HostConfig.Resources.BlkioDeviceWriteBps {
				if v0 != nil {
					var containerCopy0_CommonContainer_HostConfig0_Resources_BlkioDeviceWriteBps0 github_com_docker_docker_api_types_blkiodev.ThrottleDevice
					containerCopy0_CommonContainer_HostConfig0_Resources_BlkioDeviceWriteBps0 = *v0
					containerCopy.CommonContainer.HostConfig.Resources.BlkioDeviceWriteBps[i0] = &containerCopy0_CommonContainer_HostConfig0_Resources_BlkioDeviceWriteBps0
				}

			}

		}

		if container.CommonContainer.HostConfig.Resources.BlkioDeviceReadIOps != nil {
			containerCopy.CommonContainer.HostConfig.Resources.BlkioDeviceReadIOps = make([]*github_com_docker_docker_api_types_blkiodev.ThrottleDevice, len(container.CommonContainer.HostConfig.Resources.BlkioDeviceReadIOps))
			for i0, v0 := range container.CommonContainer.HostConfig.Resources.BlkioDeviceReadIOps {
				if v0 != nil {
					var containerCopy0_CommonContainer_HostConfig0_Resources_BlkioDeviceReadIOps0 github_com_docker_docker_api_types_blkiodev.ThrottleDevice
					containerCopy0_CommonContainer_HostConfig0_Resources_BlkioDeviceReadIOps0 = *v0
					containerCopy.CommonContainer.HostConfig.Resources.BlkioDeviceReadIOps[i0] = &containerCopy0_CommonContainer_HostConfig0_Resources_BlkioDeviceReadIOps0
				}

			}

		}

		if container.CommonContainer.HostConfig.Resources.BlkioDeviceWriteIOps != nil {
			containerCopy.CommonContainer.HostConfig.Resources.BlkioDeviceWriteIOps = make([]*github_com_docker_docker_api_types_blkiodev.ThrottleDevice, len(container.CommonContainer.HostConfig.Resources.BlkioDeviceWriteIOps))
			for i0, v0 := range container.CommonContainer.HostConfig.Resources.BlkioDeviceWriteIOps {
				if v0 != nil {
					var containerCopy0_CommonContainer_HostConfig0_Resources_BlkioDeviceWriteIOps0 github_com_docker_docker_api_types_blkiodev.ThrottleDevice
					containerCopy0_CommonContainer_HostConfig0_Resources_BlkioDeviceWriteIOps0 = *v0
					containerCopy.CommonContainer.HostConfig.Resources.BlkioDeviceWriteIOps[i0] = &containerCopy0_CommonContainer_HostConfig0_Resources_BlkioDeviceWriteIOps0
				}

			}

		}

		if container.CommonContainer.HostConfig.Resources.Devices != nil {
			containerCopy.CommonContainer.HostConfig.Resources.Devices = make([]github_com_docker_docker_api_types_container.DeviceMapping, len(container.CommonContainer.HostConfig.Resources.Devices))
			for i0, v0 := range container.CommonContainer.HostConfig.Resources.Devices {
				containerCopy.CommonContainer.HostConfig.Resources.Devices[i0] = v0
			}

		}

		if container.CommonContainer.HostConfig.Resources.MemorySwappiness != nil {
			var containerCopy0_CommonContainer_HostConfig0_Resources_MemorySwappiness int64
			containerCopy0_CommonContainer_HostConfig0_Resources_MemorySwappiness = *container.CommonContainer.HostConfig.Resources.MemorySwappiness
			containerCopy.CommonContainer.HostConfig.Resources.MemorySwappiness = &containerCopy0_CommonContainer_HostConfig0_Resources_MemorySwappiness
		}

		if container.CommonContainer.HostConfig.Resources.OomKillDisable != nil {
			var containerCopy0_CommonContainer_HostConfig0_Resources_OomKillDisable bool
			containerCopy0_CommonContainer_HostConfig0_Resources_OomKillDisable = *container.CommonContainer.HostConfig.Resources.OomKillDisable
			containerCopy.CommonContainer.HostConfig.Resources.OomKillDisable = &containerCopy0_CommonContainer_HostConfig0_Resources_OomKillDisable
		}

		if container.CommonContainer.HostConfig.Resources.Ulimits != nil {
			containerCopy.CommonContainer.HostConfig.Resources.Ulimits = make([]*github_com_docker_go_units.Ulimit, len(container.CommonContainer.HostConfig.Resources.Ulimits))
			for i0, v0 := range container.CommonContainer.HostConfig.Resources.Ulimits {
				if v0 != nil {
					var containerCopy0_CommonContainer_HostConfig0_Resources_Ulimits0 github_com_docker_go_units.Ulimit
					containerCopy0_CommonContainer_HostConfig0_Resources_Ulimits0 = *v0
					containerCopy.CommonContainer.HostConfig.Resources.Ulimits[i0] = &containerCopy0_CommonContainer_HostConfig0_Resources_Ulimits0
				}

			}

		}

		if container.CommonContainer.HostConfig.Mounts != nil {
			containerCopy.CommonContainer.HostConfig.Mounts = make([]github_com_docker_docker_api_types_mount.Mount, len(container.CommonContainer.HostConfig.Mounts))
			for i0, v0 := range container.CommonContainer.HostConfig.Mounts {
				containerCopy.CommonContainer.HostConfig.Mounts[i0] = v0
				if v0.BindOptions != nil {
					var containerCopy0_CommonContainer_HostConfig0_Mounts0_BindOptions github_com_docker_docker_api_types_mount.BindOptions
					containerCopy0_CommonContainer_HostConfig0_Mounts0_BindOptions = *v0.BindOptions
					containerCopy.CommonContainer.HostConfig.Mounts[i0].BindOptions = &containerCopy0_CommonContainer_HostConfig0_Mounts0_BindOptions
				}

				if v0.VolumeOptions != nil {
					var containerCopy0_CommonContainer_HostConfig0_Mounts0_VolumeOptions github_com_docker_docker_api_types_mount.VolumeOptions
					containerCopy0_CommonContainer_HostConfig0_Mounts0_VolumeOptions = *v0.VolumeOptions
					containerCopy.CommonContainer.HostConfig.Mounts[i0].VolumeOptions = &containerCopy0_CommonContainer_HostConfig0_Mounts0_VolumeOptions
					if v0.VolumeOptions.Labels != nil {
						containerCopy.CommonContainer.HostConfig.Mounts[i0].VolumeOptions.Labels = make(map[string]string, len(v0.VolumeOptions.Labels))
						for i1, v1 := range v0.VolumeOptions.Labels {
							containerCopy.CommonContainer.HostConfig.Mounts[i0].VolumeOptions.Labels[i1] = v1
						}

					}

					if v0.VolumeOptions.DriverConfig != nil {
						var containerCopy0_CommonContainer_HostConfig0_Mounts0_VolumeOptions1_DriverConfig github_com_docker_docker_api_types_mount.Driver
						containerCopy0_CommonContainer_HostConfig0_Mounts0_VolumeOptions1_DriverConfig = *v0.VolumeOptions.DriverConfig
						containerCopy.CommonContainer.HostConfig.Mounts[i0].VolumeOptions.DriverConfig = &containerCopy0_CommonContainer_HostConfig0_Mounts0_VolumeOptions1_DriverConfig
						if v0.VolumeOptions.DriverConfig.Options != nil {
							containerCopy.CommonContainer.HostConfig.Mounts[i0].VolumeOptions.DriverConfig.Options = make(map[string]string, len(v0.VolumeOptions.DriverConfig.Options))
							for i1, v1 := range v0.VolumeOptions.DriverConfig.Options {
								containerCopy.CommonContainer.HostConfig.Mounts[i0].VolumeOptions.DriverConfig.Options[i1] = v1
							}

						}

					}

				}

			}

		}

		if container.CommonContainer.HostConfig.Init != nil {
			var containerCopy0_CommonContainer_HostConfig0_Init bool
			containerCopy0_CommonContainer_HostConfig0_Init = *container.CommonContainer.HostConfig.Init
			containerCopy.CommonContainer.HostConfig.Init = &containerCopy0_CommonContainer_HostConfig0_Init
		}

	}

	return &containerCopy
}
